const { Pool } = require('pg');

const pool = new Pool({
  connectionString: 'postgresql://neondb_owner:npg_xhHMfZ6Iz8dL@ep-morning-tooth-agnusonk-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
  ssl: {
    rejectUnauthorized: false
  }
});

async function checkSchema() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // Check current database and schema
    const currentDB = await pool.query('SELECT current_database(), current_schema()');
    console.log('üìç –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', currentDB.rows[0].current_database);
    console.log('üìç –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞:', currentDB.rows[0].current_schema);

    // List all schemas
    const schemas = await pool.query(`
      SELECT schema_name
      FROM information_schema.schemata
      WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      ORDER BY schema_name
    `);

    console.log('\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã:');
    schemas.rows.forEach(row => {
      console.log(`  - ${row.schema_name}`);
    });

    // List all tables in all schemas
    const tables = await pool.query(`
      SELECT table_schema, table_name
      FROM information_schema.tables
      WHERE table_type = 'BASE TABLE'
      AND table_schema NOT IN ('information_schema', 'pg_catalog')
      ORDER BY table_schema, table_name
    `);

    console.log('\nüìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã:');
    if (tables.rows.length === 0) {
      console.log('  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      tables.rows.forEach(row => {
        console.log(`  - ${row.table_schema}.${row.table_name}`);
      });
    }

    // Check if students table exists specifically
    const studentsTable = await pool.query(`
      SELECT table_schema, table_name
      FROM information_schema.tables
      WHERE table_name = 'students'
    `);

    console.log('\nüéØ –¢–∞–±–ª–∏—Ü–∞ students:');
    if (studentsTable.rows.length === 0) {
      console.log('  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      studentsTable.rows.forEach(row => {
        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ: ${row.table_schema}`);
      });
    }

    // Try to create table explicitly in public schema
    console.log('\nüõ†Ô∏è  –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —Å—Ö–µ–º–µ public...');

    const createTableQuery = `
      DROP TABLE IF EXISTS public.students;
      CREATE TABLE public.students (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        age INTEGER NOT NULL,
        phone VARCHAR(20) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        course VARCHAR(100) NOT NULL,
        program VARCHAR(50),
        tariff VARCHAR(50),
        telegram VARCHAR(100),
        parent_name VARCHAR(255),
        additional_info TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    await pool.query(createTableQuery);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ public.students —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    // Insert test data
    const insertQuery = `
      INSERT INTO public.students (
        name, age, phone, email, course, program, tariff, telegram, parent_name, additional_info
      ) VALUES
      ('–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', 22, '+7 777 111 2233', 'anna@example.com', 'AI Creator', null, null, '@anna_ai', null, '–î–∏–∑–∞–π–Ω–µ—Ä, —Ö–æ—á–µ—Ç –∏–∑—É—á–∏—Ç—å AI'),
      ('–ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤', 14, '+7 777 444 5566', 'maxim@example.com', 'AI Kids', '12-17', 'standard', '@maxim_coder', '–ü–µ—Ç—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞', '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º'),
      ('–°–æ—Ñ–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 10, '+7 777 777 8899', 'sofia@example.com', 'AI Kids', '8-12', 'basic', '@sofia_young', '–°–∏–¥–æ—Ä–æ–≤ –ê–Ω–¥—Ä–µ–π', '–õ—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∏ –º—É–ª—å—Ç–∏–∫–∏')
      ON CONFLICT (email) DO NOTHING;
    `;

    const insertResult = await pool.query(insertQuery);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${insertResult.rowCount || 0} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);

    // Check final table content
    const finalCheck = await pool.query('SELECT COUNT(*) as count FROM public.students');
    console.log(`üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${finalCheck.rows[0].count}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

checkSchema();